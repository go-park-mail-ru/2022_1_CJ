// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/post.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	common "github.com/go-park-mail-ru/2022_1_CJ/internal/model/common"
	core "github.com/go-park-mail-ru/2022_1_CJ/internal/model/core"
	gomock "github.com/golang/mock/gomock"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepository) CreatePost(ctx context.Context, post *core.Post) (*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepository)(nil).CreatePost), ctx, post)
}

// DeletePost mocks base method.
func (m *MockPostRepository) DeletePost(ctx context.Context, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryMockRecorder) DeletePost(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepository)(nil).DeletePost), ctx, postID)
}

// EditPost mocks base method.
func (m *MockPostRepository) EditPost(ctx context.Context, post *core.Post) (*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPost", ctx, post)
	ret0, _ := ret[0].(*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPost indicates an expected call of EditPost.
func (mr *MockPostRepositoryMockRecorder) EditPost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPost", reflect.TypeOf((*MockPostRepository)(nil).EditPost), ctx, post)
}

// GetFeed mocks base method.
func (m *MockPostRepository) GetFeed(ctx context.Context, userID string, pageNumber, limit int64) ([]core.Post, *common.PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", ctx, userID, pageNumber, limit)
	ret0, _ := ret[0].([]core.Post)
	ret1, _ := ret[1].(*common.PageResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockPostRepositoryMockRecorder) GetFeed(ctx, userID, pageNumber, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockPostRepository)(nil).GetFeed), ctx, userID, pageNumber, limit)
}

// GetPostByID mocks base method.
func (m *MockPostRepository) GetPostByID(ctx context.Context, postID string) (*core.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, postID)
	ret0, _ := ret[0].(*core.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockPostRepositoryMockRecorder) GetPostByID(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockPostRepository)(nil).GetPostByID), ctx, postID)
}

// GetPostsByUserID mocks base method.
func (m *MockPostRepository) GetPostsByUserID(ctx context.Context, userID string, pageNumber, limit int64) ([]core.Post, *common.PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByUserID", ctx, userID, pageNumber, limit)
	ret0, _ := ret[0].([]core.Post)
	ret1, _ := ret[1].(*common.PageResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPostsByUserID indicates an expected call of GetPostsByUserID.
func (mr *MockPostRepositoryMockRecorder) GetPostsByUserID(ctx, userID, pageNumber, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByUserID", reflect.TypeOf((*MockPostRepository)(nil).GetPostsByUserID), ctx, userID, pageNumber, limit)
}

// PostAddComment mocks base method.
func (m *MockPostRepository) PostAddComment(ctx context.Context, postID, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostAddComment", ctx, postID, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostAddComment indicates an expected call of PostAddComment.
func (mr *MockPostRepositoryMockRecorder) PostAddComment(ctx, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostAddComment", reflect.TypeOf((*MockPostRepository)(nil).PostAddComment), ctx, postID, commentID)
}

// PostCheckComment mocks base method.
func (m *MockPostRepository) PostCheckComment(ctx context.Context, post *core.Post, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCheckComment", ctx, post, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostCheckComment indicates an expected call of PostCheckComment.
func (mr *MockPostRepositoryMockRecorder) PostCheckComment(ctx, post, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCheckComment", reflect.TypeOf((*MockPostRepository)(nil).PostCheckComment), ctx, post, commentID)
}

// PostDeleteComment mocks base method.
func (m *MockPostRepository) PostDeleteComment(ctx context.Context, postID, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostDeleteComment", ctx, postID, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostDeleteComment indicates an expected call of PostDeleteComment.
func (mr *MockPostRepositoryMockRecorder) PostDeleteComment(ctx, postID, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostDeleteComment", reflect.TypeOf((*MockPostRepository)(nil).PostDeleteComment), ctx, postID, commentID)
}
