// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/community.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	common "github.com/go-park-mail-ru/2022_1_CJ/internal/model/common"
	core "github.com/go-park-mail-ru/2022_1_CJ/internal/model/core"
	gomock "github.com/golang/mock/gomock"
)

// MockCommunityRepository is a mock of CommunityRepository interface.
type MockCommunityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityRepositoryMockRecorder
}

// MockCommunityRepositoryMockRecorder is the mock recorder for MockCommunityRepository.
type MockCommunityRepositoryMockRecorder struct {
	mock *MockCommunityRepository
}

// NewMockCommunityRepository creates a new mock instance.
func NewMockCommunityRepository(ctrl *gomock.Controller) *MockCommunityRepository {
	mock := &MockCommunityRepository{ctrl: ctrl}
	mock.recorder = &MockCommunityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityRepository) EXPECT() *MockCommunityRepositoryMockRecorder {
	return m.recorder
}

// AddFollower mocks base method.
func (m *MockCommunityRepository) AddFollower(ctx context.Context, communityID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFollower", ctx, communityID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFollower indicates an expected call of AddFollower.
func (mr *MockCommunityRepositoryMockRecorder) AddFollower(ctx, communityID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFollower", reflect.TypeOf((*MockCommunityRepository)(nil).AddFollower), ctx, communityID, userID)
}

// CommunityAddPost mocks base method.
func (m *MockCommunityRepository) CommunityAddPost(ctx context.Context, communityID, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommunityAddPost", ctx, communityID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommunityAddPost indicates an expected call of CommunityAddPost.
func (mr *MockCommunityRepositoryMockRecorder) CommunityAddPost(ctx, communityID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommunityAddPost", reflect.TypeOf((*MockCommunityRepository)(nil).CommunityAddPost), ctx, communityID, postID)
}

// CommunityDeletePost mocks base method.
func (m *MockCommunityRepository) CommunityDeletePost(ctx context.Context, communityID, postID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommunityDeletePost", ctx, communityID, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommunityDeletePost indicates an expected call of CommunityDeletePost.
func (mr *MockCommunityRepositoryMockRecorder) CommunityDeletePost(ctx, communityID, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommunityDeletePost", reflect.TypeOf((*MockCommunityRepository)(nil).CommunityDeletePost), ctx, communityID, postID)
}

// CreateCommunity mocks base method.
func (m *MockCommunityRepository) CreateCommunity(ctx context.Context, community *core.Community) (*core.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunity", ctx, community)
	ret0, _ := ret[0].(*core.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunity indicates an expected call of CreateCommunity.
func (mr *MockCommunityRepositoryMockRecorder) CreateCommunity(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).CreateCommunity), ctx, community)
}

// DeleteAdmin mocks base method.
func (m *MockCommunityRepository) DeleteAdmin(ctx context.Context, communityID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", ctx, communityID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockCommunityRepositoryMockRecorder) DeleteAdmin(ctx, communityID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockCommunityRepository)(nil).DeleteAdmin), ctx, communityID, userID)
}

// DeleteCommunity mocks base method.
func (m *MockCommunityRepository) DeleteCommunity(ctx context.Context, communityID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCommunity", ctx, communityID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCommunity indicates an expected call of DeleteCommunity.
func (mr *MockCommunityRepositoryMockRecorder) DeleteCommunity(ctx, communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).DeleteCommunity), ctx, communityID)
}

// DeleteFollower mocks base method.
func (m *MockCommunityRepository) DeleteFollower(ctx context.Context, communityID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFollower", ctx, communityID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFollower indicates an expected call of DeleteFollower.
func (mr *MockCommunityRepositoryMockRecorder) DeleteFollower(ctx, communityID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFollower", reflect.TypeOf((*MockCommunityRepository)(nil).DeleteFollower), ctx, communityID, userID)
}

// EditCommunity mocks base method.
func (m *MockCommunityRepository) EditCommunity(ctx context.Context, community *core.Community) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCommunity", ctx, community)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditCommunity indicates an expected call of EditCommunity.
func (mr *MockCommunityRepositoryMockRecorder) EditCommunity(ctx, community interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCommunity", reflect.TypeOf((*MockCommunityRepository)(nil).EditCommunity), ctx, community)
}

// GetAllCommunities mocks base method.
func (m *MockCommunityRepository) GetAllCommunities(ctx context.Context, limit, pageNumber int64) ([]core.Community, *common.PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCommunities", ctx, limit, pageNumber)
	ret0, _ := ret[0].([]core.Community)
	ret1, _ := ret[1].(*common.PageResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAllCommunities indicates an expected call of GetAllCommunities.
func (mr *MockCommunityRepositoryMockRecorder) GetAllCommunities(ctx, limit, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCommunities", reflect.TypeOf((*MockCommunityRepository)(nil).GetAllCommunities), ctx, limit, pageNumber)
}

// GetCommunityByID mocks base method.
func (m *MockCommunityRepository) GetCommunityByID(ctx context.Context, communityID string) (*core.Community, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityByID", ctx, communityID)
	ret0, _ := ret[0].(*core.Community)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityByID indicates an expected call of GetCommunityByID.
func (mr *MockCommunityRepositoryMockRecorder) GetCommunityByID(ctx, communityID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityByID", reflect.TypeOf((*MockCommunityRepository)(nil).GetCommunityByID), ctx, communityID)
}

// SearchCommunities mocks base method.
func (m *MockCommunityRepository) SearchCommunities(ctx context.Context, selector string, limit, pageNumber int64) ([]core.Community, *common.PageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchCommunities", ctx, selector, limit, pageNumber)
	ret0, _ := ret[0].([]core.Community)
	ret1, _ := ret[1].(*common.PageResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchCommunities indicates an expected call of SearchCommunities.
func (mr *MockCommunityRepositoryMockRecorder) SearchCommunities(ctx, selector, limit, pageNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchCommunities", reflect.TypeOf((*MockCommunityRepository)(nil).SearchCommunities), ctx, selector, limit, pageNumber)
}
