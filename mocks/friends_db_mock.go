// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/friends.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFriendsRepository is a mock of FriendsRepository interface.
type MockFriendsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsRepositoryMockRecorder
}

// MockFriendsRepositoryMockRecorder is the mock recorder for MockFriendsRepository.
type MockFriendsRepositoryMockRecorder struct {
	mock *MockFriendsRepository
}

// NewMockFriendsRepository creates a new mock instance.
func NewMockFriendsRepository(ctrl *gomock.Controller) *MockFriendsRepository {
	mock := &MockFriendsRepository{ctrl: ctrl}
	mock.recorder = &MockFriendsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendsRepository) EXPECT() *MockFriendsRepositoryMockRecorder {
	return m.recorder
}

// CreateFriends mocks base method.
func (m *MockFriendsRepository) CreateFriends(ctx context.Context, FriendsID, UserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriends", ctx, FriendsID, UserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriends indicates an expected call of CreateFriends.
func (mr *MockFriendsRepositoryMockRecorder) CreateFriends(ctx, FriendsID, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriends", reflect.TypeOf((*MockFriendsRepository)(nil).CreateFriends), ctx, FriendsID, UserID)
}

// DeleteFriend mocks base method.
func (m *MockFriendsRepository) DeleteFriend(ctx context.Context, ExFriendID1, ExFriendID2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, ExFriendID1, ExFriendID2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendsRepositoryMockRecorder) DeleteFriend(ctx, ExFriendID1, ExFriendID2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriendsRepository)(nil).DeleteFriend), ctx, ExFriendID1, ExFriendID2)
}

// DeleteRequest mocks base method.
func (m *MockFriendsRepository) DeleteRequest(ctx context.Context, UserID, PersonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", ctx, UserID, PersonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockFriendsRepositoryMockRecorder) DeleteRequest(ctx, UserID, PersonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockFriendsRepository)(nil).DeleteRequest), ctx, UserID, PersonID)
}

// GetFriendsByID mocks base method.
func (m *MockFriendsRepository) GetFriendsByID(ctx context.Context, FriendsID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsByID", ctx, FriendsID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsByID indicates an expected call of GetFriendsByID.
func (mr *MockFriendsRepositoryMockRecorder) GetFriendsByID(ctx, FriendsID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsByID", reflect.TypeOf((*MockFriendsRepository)(nil).GetFriendsByID), ctx, FriendsID)
}

// GetFriendsByUserID mocks base method.
func (m *MockFriendsRepository) GetFriendsByUserID(ctx context.Context, UserID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsByUserID", ctx, UserID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsByUserID indicates an expected call of GetFriendsByUserID.
func (mr *MockFriendsRepositoryMockRecorder) GetFriendsByUserID(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsByUserID", reflect.TypeOf((*MockFriendsRepository)(nil).GetFriendsByUserID), ctx, UserID)
}

// GetRequestsByUserID mocks base method.
func (m *MockFriendsRepository) GetRequestsByUserID(ctx context.Context, UserID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestsByUserID", ctx, UserID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequestsByUserID indicates an expected call of GetRequestsByUserID.
func (mr *MockFriendsRepositoryMockRecorder) GetRequestsByUserID(ctx, UserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestsByUserID", reflect.TypeOf((*MockFriendsRepository)(nil).GetRequestsByUserID), ctx, UserID)
}

// IsNotFriend mocks base method.
func (m *MockFriendsRepository) IsNotFriend(ctx context.Context, UserID, PersonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFriend", ctx, UserID, PersonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsNotFriend indicates an expected call of IsNotFriend.
func (mr *MockFriendsRepositoryMockRecorder) IsNotFriend(ctx, UserID, PersonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFriend", reflect.TypeOf((*MockFriendsRepository)(nil).IsNotFriend), ctx, UserID, PersonID)
}

// IsUniqRequest mocks base method.
func (m *MockFriendsRepository) IsUniqRequest(ctx context.Context, UserID, PersonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqRequest", ctx, UserID, PersonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUniqRequest indicates an expected call of IsUniqRequest.
func (mr *MockFriendsRepositoryMockRecorder) IsUniqRequest(ctx, UserID, PersonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqRequest", reflect.TypeOf((*MockFriendsRepository)(nil).IsUniqRequest), ctx, UserID, PersonID)
}

// MakeFriends mocks base method.
func (m *MockFriendsRepository) MakeFriends(ctx context.Context, UserID, PersonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeFriends", ctx, UserID, PersonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeFriends indicates an expected call of MakeFriends.
func (mr *MockFriendsRepositoryMockRecorder) MakeFriends(ctx, UserID, PersonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFriends", reflect.TypeOf((*MockFriendsRepository)(nil).MakeFriends), ctx, UserID, PersonID)
}

// MakeRequest mocks base method.
func (m *MockFriendsRepository) MakeRequest(ctx context.Context, UserID, PersonID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRequest", ctx, UserID, PersonID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeRequest indicates an expected call of MakeRequest.
func (mr *MockFriendsRepositoryMockRecorder) MakeRequest(ctx, UserID, PersonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockFriendsRepository)(nil).MakeRequest), ctx, UserID, PersonID)
}
