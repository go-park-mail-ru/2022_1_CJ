// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/friends.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFriendsRepository is a mock of FriendsRepository interface.
type MockFriendsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFriendsRepositoryMockRecorder
}

// MockFriendsRepositoryMockRecorder is the mock recorder for MockFriendsRepository.
type MockFriendsRepositoryMockRecorder struct {
	mock *MockFriendsRepository
}

// NewMockFriendsRepository creates a new mock instance.
func NewMockFriendsRepository(ctrl *gomock.Controller) *MockFriendsRepository {
	mock := &MockFriendsRepository{ctrl: ctrl}
	mock.recorder = &MockFriendsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendsRepository) EXPECT() *MockFriendsRepositoryMockRecorder {
	return m.recorder
}

// CreateFriends mocks base method.
func (m *MockFriendsRepository) CreateFriends(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFriends", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFriends indicates an expected call of CreateFriends.
func (mr *MockFriendsRepositoryMockRecorder) CreateFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFriends", reflect.TypeOf((*MockFriendsRepository)(nil).CreateFriends), ctx, userID)
}

// CreateRequest mocks base method.
func (m *MockFriendsRepository) CreateRequest(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRequest", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRequest indicates an expected call of CreateRequest.
func (mr *MockFriendsRepositoryMockRecorder) CreateRequest(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRequest", reflect.TypeOf((*MockFriendsRepository)(nil).CreateRequest), ctx, from, to)
}

// DeleteFriend mocks base method.
func (m *MockFriendsRepository) DeleteFriend(ctx context.Context, userID1, userID2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriend", ctx, userID1, userID2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriend indicates an expected call of DeleteFriend.
func (mr *MockFriendsRepositoryMockRecorder) DeleteFriend(ctx, userID1, userID2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriend", reflect.TypeOf((*MockFriendsRepository)(nil).DeleteFriend), ctx, userID1, userID2)
}

// DeleteRequest mocks base method.
func (m *MockFriendsRepository) DeleteRequest(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRequest", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRequest indicates an expected call of DeleteRequest.
func (mr *MockFriendsRepositoryMockRecorder) DeleteRequest(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRequest", reflect.TypeOf((*MockFriendsRepository)(nil).DeleteRequest), ctx, from, to)
}

// GetFriends mocks base method.
func (m *MockFriendsRepository) GetFriends(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriends", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriends indicates an expected call of GetFriends.
func (mr *MockFriendsRepositoryMockRecorder) GetFriends(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriends", reflect.TypeOf((*MockFriendsRepository)(nil).GetFriends), ctx, userID)
}

// GetIncomingRequests mocks base method.
func (m *MockFriendsRepository) GetIncomingRequests(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncomingRequests", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncomingRequests indicates an expected call of GetIncomingRequests.
func (mr *MockFriendsRepositoryMockRecorder) GetIncomingRequests(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncomingRequests", reflect.TypeOf((*MockFriendsRepository)(nil).GetIncomingRequests), ctx, userID)
}

// GetOutcomingRequests mocks base method.
func (m *MockFriendsRepository) GetOutcomingRequests(ctx context.Context, userID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutcomingRequests", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutcomingRequests indicates an expected call of GetOutcomingRequests.
func (mr *MockFriendsRepositoryMockRecorder) GetOutcomingRequests(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutcomingRequests", reflect.TypeOf((*MockFriendsRepository)(nil).GetOutcomingRequests), ctx, userID)
}

// IsNotFriend mocks base method.
func (m *MockFriendsRepository) IsNotFriend(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFriend", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsNotFriend indicates an expected call of IsNotFriend.
func (mr *MockFriendsRepositoryMockRecorder) IsNotFriend(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFriend", reflect.TypeOf((*MockFriendsRepository)(nil).IsNotFriend), ctx, from, to)
}

// IsUniqRequest mocks base method.
func (m *MockFriendsRepository) IsUniqRequest(ctx context.Context, from, to string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqRequest", ctx, from, to)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUniqRequest indicates an expected call of IsUniqRequest.
func (mr *MockFriendsRepositoryMockRecorder) IsUniqRequest(ctx, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqRequest", reflect.TypeOf((*MockFriendsRepository)(nil).IsUniqRequest), ctx, from, to)
}

// MakeFriends mocks base method.
func (m *MockFriendsRepository) MakeFriends(ctx context.Context, userID1, userID2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeFriends", ctx, userID1, userID2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeFriends indicates an expected call of MakeFriends.
func (mr *MockFriendsRepositoryMockRecorder) MakeFriends(ctx, userID1, userID2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFriends", reflect.TypeOf((*MockFriendsRepository)(nil).MakeFriends), ctx, userID1, userID2)
}
