// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/comment.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	core "github.com/go-park-mail-ru/2022_1_CJ/internal/model/core"
	gomock "github.com/golang/mock/gomock"
)

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentRepository) CreateComment(ctx context.Context, comment *core.Comment) (*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentRepositoryMockRecorder) CreateComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentRepository)(nil).CreateComment), ctx, comment)
}

// DeleteComment mocks base method.
func (m *MockCommentRepository) DeleteComment(ctx context.Context, commentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentRepositoryMockRecorder) DeleteComment(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockCommentRepository)(nil).DeleteComment), ctx, commentID)
}

// EditComment mocks base method.
func (m *MockCommentRepository) EditComment(ctx context.Context, comment *core.Comment) (*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditComment", ctx, comment)
	ret0, _ := ret[0].(*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditComment indicates an expected call of EditComment.
func (mr *MockCommentRepositoryMockRecorder) EditComment(ctx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditComment", reflect.TypeOf((*MockCommentRepository)(nil).EditComment), ctx, comment)
}

// GetCommentByID mocks base method.
func (m *MockCommentRepository) GetCommentByID(ctx context.Context, commentID string) (*core.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, commentID)
	ret0, _ := ret[0].(*core.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockCommentRepositoryMockRecorder) GetCommentByID(ctx, commentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockCommentRepository)(nil).GetCommentByID), ctx, commentID)
}
