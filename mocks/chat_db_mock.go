// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/chat.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	common "github.com/go-park-mail-ru/2022_1_CJ/internal/model/common"
	core "github.com/go-park-mail-ru/2022_1_CJ/internal/model/core"
	gomock "github.com/golang/mock/gomock"
)

// MockChatRepository is a mock of ChatRepository interface.
type MockChatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockChatRepositoryMockRecorder
}

// MockChatRepositoryMockRecorder is the mock recorder for MockChatRepository.
type MockChatRepositoryMockRecorder struct {
	mock *MockChatRepository
}

// NewMockChatRepository creates a new mock instance.
func NewMockChatRepository(ctrl *gomock.Controller) *MockChatRepository {
	mock := &MockChatRepository{ctrl: ctrl}
	mock.recorder = &MockChatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatRepository) EXPECT() *MockChatRepositoryMockRecorder {
	return m.recorder
}

// CreateDialog mocks base method.
func (m *MockChatRepository) CreateDialog(ctx context.Context, UserId string, AuthorIDs []string) (*core.Dialog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDialog", ctx, UserId, AuthorIDs)
	ret0, _ := ret[0].(*core.Dialog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDialog indicates an expected call of CreateDialog.
func (mr *MockChatRepositoryMockRecorder) CreateDialog(ctx, UserId, AuthorIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDialog", reflect.TypeOf((*MockChatRepository)(nil).CreateDialog), ctx, UserId, AuthorIDs)
}

// GetDialogInfo mocks base method.
func (m *MockChatRepository) GetDialogInfo(ctx context.Context, DialogID string) (common.DialogInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDialogInfo", ctx, DialogID)
	ret0, _ := ret[0].(common.DialogInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDialogInfo indicates an expected call of GetDialogInfo.
func (mr *MockChatRepositoryMockRecorder) GetDialogInfo(ctx, DialogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDialogInfo", reflect.TypeOf((*MockChatRepository)(nil).GetDialogInfo), ctx, DialogID)
}

// IsChatExist mocks base method.
func (m *MockChatRepository) IsChatExist(ctx context.Context, DialogID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsChatExist", ctx, DialogID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsChatExist indicates an expected call of IsChatExist.
func (mr *MockChatRepositoryMockRecorder) IsChatExist(ctx, DialogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsChatExist", reflect.TypeOf((*MockChatRepository)(nil).IsChatExist), ctx, DialogID)
}

// IsUniqDialog mocks base method.
func (m *MockChatRepository) IsUniqDialog(ctx context.Context, fUserID, sUserID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqDialog", ctx, fUserID, sUserID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsUniqDialog indicates an expected call of IsUniqDialog.
func (mr *MockChatRepositoryMockRecorder) IsUniqDialog(ctx, fUserID, sUserID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqDialog", reflect.TypeOf((*MockChatRepository)(nil).IsUniqDialog), ctx, fUserID, sUserID)
}

// SendMessage mocks base method.
func (m *MockChatRepository) SendMessage(ctx context.Context, Message common.MessageInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, Message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChatRepositoryMockRecorder) SendMessage(ctx, Message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockChatRepository)(nil).SendMessage), ctx, Message)
}
