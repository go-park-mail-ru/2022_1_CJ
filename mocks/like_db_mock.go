// Code generated by MockGen. DO NOT EDIT.
// Source: internal/db/like.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	context "context"
	reflect "reflect"

	core "github.com/go-park-mail-ru/2022_1_CJ/internal/model/core"
	gomock "github.com/golang/mock/gomock"
)

// MockLikeRepository is a mock of LikeRepository interface.
type MockLikeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLikeRepositoryMockRecorder
}

// MockLikeRepositoryMockRecorder is the mock recorder for MockLikeRepository.
type MockLikeRepositoryMockRecorder struct {
	mock *MockLikeRepository
}

// NewMockLikeRepository creates a new mock instance.
func NewMockLikeRepository(ctrl *gomock.Controller) *MockLikeRepository {
	mock := &MockLikeRepository{ctrl: ctrl}
	mock.recorder = &MockLikeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeRepository) EXPECT() *MockLikeRepositoryMockRecorder {
	return m.recorder
}

// CreateLike mocks base method.
func (m *MockLikeRepository) CreateLike(ctx context.Context, like *core.Like) (*core.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLike", ctx, like)
	ret0, _ := ret[0].(*core.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLike indicates an expected call of CreateLike.
func (mr *MockLikeRepositoryMockRecorder) CreateLike(ctx, like interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLike", reflect.TypeOf((*MockLikeRepository)(nil).CreateLike), ctx, like)
}

// GetLikeBySubjectID mocks base method.
func (m *MockLikeRepository) GetLikeBySubjectID(ctx context.Context, subjectID string) (*core.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikeBySubjectID", ctx, subjectID)
	ret0, _ := ret[0].(*core.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikeBySubjectID indicates an expected call of GetLikeBySubjectID.
func (mr *MockLikeRepositoryMockRecorder) GetLikeBySubjectID(ctx, subjectID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikeBySubjectID", reflect.TypeOf((*MockLikeRepository)(nil).GetLikeBySubjectID), ctx, subjectID)
}

// IncreaseLike mocks base method.
func (m *MockLikeRepository) IncreaseLike(ctx context.Context, subjectID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseLike", ctx, subjectID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseLike indicates an expected call of IncreaseLike.
func (mr *MockLikeRepositoryMockRecorder) IncreaseLike(ctx, subjectID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseLike", reflect.TypeOf((*MockLikeRepository)(nil).IncreaseLike), ctx, subjectID, userID)
}

// ReduceLike mocks base method.
func (m *MockLikeRepository) ReduceLike(ctx context.Context, subjectID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReduceLike", ctx, subjectID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReduceLike indicates an expected call of ReduceLike.
func (mr *MockLikeRepositoryMockRecorder) ReduceLike(ctx, subjectID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReduceLike", reflect.TypeOf((*MockLikeRepository)(nil).ReduceLike), ctx, subjectID, userID)
}
