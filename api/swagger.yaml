openapi: 3.0.3
info:
  title: CJ
  description: "Social Network VK"
  version: 1.0.0-oas3
servers:
  - url: /api
security:
  - CookieAuth: []

paths:
  /auth/signup:
    post:
      tags:
        - Authorization
      summary: Signup user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupUserRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignupUserResponse"

  /auth/login:
    post:
      tags:
        - Authorization
      summary: Login user
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginUserResponse"

  /auth/logout:
    delete:
      tags:
        - Authorization
      summary: Logout user
      security: []
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /user/get:
    get:
      tags:
        - User
      summary: Get user data
      security: []
      parameters:
        - $ref: "#/components/parameters/userIDParam"
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserResponse"

  /user/posts:
    get:
      tags:
        - User
      summary: Get user's posts
      parameters:
        - $ref: "#/components/parameters/userIDParam"
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserPostsResponse"

  /user/feed:
    get:
      tags:
        - User
      summary: Get feed
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserFeedResponse"

  /user/profile:
    get:
      tags:
        - Profile
      summary: Get user profile
      parameters:
        - $ref: "#/components/parameters/userIDParam"
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetUserProfileResponse"

  /user/profile/edit:
    post:
      tags:
        - Profile
      summary: Edit info about user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditUserProfileRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EditUserProfileResponse"
  
  /user/search:
      get:
        tags:
          - User
        summary: Search users
        parameters:
          - in: query
            name: selector
            schema:
              type: string
            required: true
        responses:
          500:
            description: Internal error
            content: {}
          200:
            description: Представители
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/SearchUsersResponse"

  /friends/request:
    post:
      tags:
        - Friends
      summary: Send a friend request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendFriendRequestRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendFriendRequestResponse"

  /friends/accept:
    post:
      tags:
        - Friends
      summary: Accept friend request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AcceptFriendRequestRequestRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AcceptFriendRequestRequestResponse"

  /friends/requests:
    get:
      tags:
        - Friends
      summary: Get my requests
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFriendRequestsResponse"

  /friends/get:
    get:
      tags:
        - Friends
      summary: Get my friends
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFriendsResponse"

  /friends/delete:
    delete:
      tags:
        - Friends
      summary: Delete friend
      parameters:
        - in: query
          name: user_id
          schema:
            type: string
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFriendResponse"

  /post/create:
    post:
      tags:
        - Post
      summary: Create new post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePostRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreatePostResponse"

  /post/get:
    get:
      tags:
        - Post
      summary: Get post
      parameters:
        - $ref: "#/components/parameters/postIDParam"
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPostResponse"

  /post/edit:
    put:
      tags:
        - Post
      summary: Edit post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostEditRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostEditResponse"

  /post/delete:
    delete:
      tags:
        - Post
      summary: Delete post
      parameters:
        - $ref: "#/components/parameters/postIDParam"
      responses:
        "500":
          description: Internal error
          content: {}
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"

  /messenger/dialogs:
    get:
      tags:
        - messenger
      summary: get all dialogs
      responses:
        "500":
          description: Internal error
          content: { }
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDialogsResponse"

  /messenger/get:
    post:
      tags:
        - messenger
      summary: get dialog
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDialogRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: { }
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetDialogResponse"

  /messenger/create:
    post:
      tags:
        - messenger
      summary: create dialog
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDialogRequest"
        required: true
      responses:
        "500":
          description: Internal error
          content: { }
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateDialogResponse"

  /messenger/ws:
    get:
      tags:
        - messenger
      summary: websocket chat
      responses:
        "500":
          description: Internal error
          content: { }
        "200":
          description: Success

components:
  parameters:
    userIDParam:
      in: query
      name: user_id
      required: false
      schema:
        type: string
      description: On empty user_id currently authorized user's id is used

    postIDParam:
      in: query
      name: post_id
      required: true
      schema:
        type: string

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: AuthToken

  schemas:
    # --------------------- Models --------------------- #

    SignupUserRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UserName"
        email:
          type: string
          example: mail@example.com
        password:
          type: string
          example: password

    SignupUserResponse:
      $ref: "#/components/schemas/BasicResponse"

    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          example: mail@example.com
        password:
          type: string
          example: password

    LoginUserResponse:
      $ref: "#/components/schemas/BasicResponse"

    GetUserResponse:
      $ref: "#/components/schemas/User"

    GetUserPostsResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

    GetUserProfileResponse:
      $ref: "#/components/schemas/UserProfile"

    EditUserProfileRequest:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/UserName"
        avatar:
          type: string
          example: fmt/img/avatar.jpg
        phone:
          type: string
        location:
          type: string
          example: Moscow
        birth_day:
          type: string

    EditUserProfileResponse:
      $ref: "#/components/schemas/BasicResponse"

    SendFriendRequestRequest:
      type: object
      properties:
        user_id:
          type: string

    SendFriendRequestResponse:
      $ref: "#/components/schemas/BasicResponse"

    AcceptFriendRequestRequestRequest:
      type: object
      properties:
        user_id:
          type: string
        is_accepted:
          type: boolean
          example: true

    AcceptFriendRequestRequestResponse:
      type: array
      items:
        $ref: "#/components/schemas/FriendRequest"

    DeleteFriendResponse:
      $ref: "#/components/schemas/BasicResponse"

    GetFriendsResponse:
      $ref: "#/components/schemas/Friends"

    GetFriendRequestsResponse:
      type: array
      items:
        $ref: "#/components/schemas/FriendRequest"

    GetUserFeedResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"

    CreatePostRequest:
      type: object
      properties:
        message:
          type: string
          example: This is my new post
        images:
          type: array
          items:
            type: string
            example: src/image.jpg

    CreatePostResponse:
      $ref: "#/components/schemas/Post"

    PostEditRequest:
      type: object
      properties:
        post_id:
          type: string
        message:
          type: string
          example: This is my new post
        images:
          type: array
          items:
            type: string
            example: src/image.jpg

    PostEditResponse:
      $ref: "#/components/schemas/Post"

    GetPostResponse:
      $ref: "#/components/schemas/Post"
      
    SearchUsersResponse:
      properties:
        users:
          type: array
          items:
            $ref: "#/components/schemas/User"

    GetDialogsResponse:
      properties:
        dialogs:
          type: array
          items:
            $ref: "#/components/schemas/Dialog"

    GetDialogRequest:
      properties:
        dialog_id:
          type: string

    GetDialogResponse:
      properties:
        dialog:
          $ref: "#/components/schemas/Dialog"
        messages:
          description: is read return only for author
          type: array
          items:
            $ref: "#/components/schemas/MessageInfo"

    CreateDialogRequest:
      properties:
        name:
          type: string
        author_ids:
          type: array
          items:
            type: string

    CreateDialogResponse:
      properties:
        dialog_id:
          type: string


    # --------------------- Models --------------------- #

    BasicResponse:
      type: object

    User:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            name:
              $ref: "#/components/schemas/UserName"
            email:
              type: string
              example: mail@example.com
            image:
              type: string

    UserName:
      type: object
      properties:
        first:
          type: string
          example: John
        last:
          type: string
          example: Doe

    UserProfile:
      type: object
      properties:
        user_profile:
          type: object
          properties:
            user_info:
              $ref: "#/components/schemas/User"
            avatar:
              type: string
              example: fmt/img/avatar.jpg
            phone:
              type: string
              example: +8(800)-555-35-35
            location:
              type: string
              example: Moscow
            birth_day:
              type: string
              example: 01.02.2018
            friend_ids:
              type: array
              items:
                type: string
              example: [friend_id1, friend_id2]
            post_ids:
              type: array
              items:
                type: string
              example: [post_id1, post_id2]

    FriendRequest:
      type: object
      properties:
        user_id:
          type: string

    Friends:
      type: object
      properties:
        friend_ids:
          type: array
          items:
            type: string

    Post:
      type: object
      properties:
        post:
          type: object
          properties:
            id:
              type: string
            author_id:
              type: string
            message:
              type: string
            images:
              type: array
              items:
                type: string
    Dialog:
      type: object
      properties:
        dialog_id:
          type: string
        name:
          type: string
        non_read:
          type: integer
        participants:
          type: array
          items:
            type: string

    MessageInfo:
      type: object
      description: is_read return only for user's message
      properties:
        author_id:
          type: string
        body:
          type: string
        created_at:
          type: integer
        is_read:
          type: array
          items:
            $ref: "#/components/schemas/IsRead"

    IsRead:
      type: object
      properties:
        id:
          type: string
        is_read:
          type: string
